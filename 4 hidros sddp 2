using SDDP, HiGHS

function subproblem_builder(subproblem::Model, node::Int)
    #max_hidro = [50, 100, 150, 200]
    max_termo = [20, 30, 20, 30] 
    nT = 4
    nH = 2
    vol_max = [45,45]
    demanda = 100
    volume_inicial = [45, 45]
    custo_termo = [8, 12, 15, 18]

    # State variables
    @variable(subproblem, 0 <= V[i=1:nH] <= vol_max[i], SDDP.State, initial_value = volume_inicial[i])

    # Control variables    
    @variables(subproblem, 
        begin
            # 0 <= H[i=1:nH] <= max_hidro[i]
            0 <= H[i=1:nH]
            0 <= T[i=1:nT] <= max_termo[i]
        end
    )

    # Random variables
    @variable(subproblem, Chuva[i=1:nH])
    Ω = [[0.0 , 0.0],[20.0 , 0.0]]
    P = [1/2, 1/2]
    SDDP.parameterize(subproblem, Ω, P) do ω
        for i in 1:nH
            JuMP.fix(Chuva[i], ω[i])
        end
    end

    # Constraints
    @constraint(subproblem, restricao_demanda, sum(T[i] for i in 1:nT) + sum(H[j] for j in 1:nH) >= demanda)
    
    for j in 1:nH
        @constraint(subproblem, V[j].out == V[j].in - H[j] + Chuva[j])
    end

    # Objective
    @stageobjective(subproblem, sum(custo_termo[i] * T[i] for i in 1:nT))

    return subproblem
end

model = SDDP.LinearPolicyGraph(
    subproblem_builder;
    stages = 2,
    sense = :Min,
    lower_bound = 0.0,
    optimizer = HiGHS.Optimizer,
)

# Treinamento do modelo
SDDP.train(model; iteration_limit = 100)

# Simulação do modelo
simulations = SDDP.simulate(
    model,
    100,  # Number of simulations
    [:V, :H, :T],  # Variables to record
)

#Processamento dos resultados das simulações
for (sim_idx, simulation) in enumerate(simulations)
    println("Simulation $sim_idx:")
    for (stage_idx, stage) in enumerate(simulation)
        println("  Stage $stage_idx:")
        println("    Volume final dos reservatórios: ", [stage[:V][i].out for i in 1:length(stage[:V])])
        println("    Produção das hidroelétricas: ", stage[:H])
        println("    Produção das térmicas: ", stage[:T])
        println("    Custo de produção: ", stage[:stage_objective])
    end
end

# Processamento dos resultados agregados das simulações
objectives = map(simulations) do simulation 
    return sum(stage[:stage_objective] for stage in simulation)
end

μ, ci = SDDP.confidence_interval(objectives)
println("Confidence interval: ", μ, " ± ", ci)
println("Lower bound: ", SDDP.calculate_bound(model))

# # Obtém o dual da restrição de demanda 
# simulations = SDDP.simulate(
#     model,
#     1,  # Perform a single simulation
#     custom_recorders = Dict{Symbol, Function}(
#         :price => (sp::JuMP.Model) -> JuMP.dual(sp[:restricao_demanda]),
#     ),
# )

# prices = map(simulations[1]) do node
#     return node[:price]
# end
# println("Preços de dual da restrição de demanda: ", prices)

